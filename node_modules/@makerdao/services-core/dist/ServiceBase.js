"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ServiceManager = _interopRequireDefault(require("./ServiceManager"));

var _ServiceType = _interopRequireDefault(require("./ServiceType"));

var _ServiceState = _interopRequireDefault(require("./ServiceState"));

/**
 * @param {string} type
 * @private
 */
function _defineLifeCycleMethods(type) {
  if (typeof this.initialize === 'undefined') {
    this.initialize = function () {};
  }

  if (type !== _ServiceType["default"].LOCAL) {
    if (typeof this.connect === 'undefined') {
      this.connect = function () {};
    }

    this.disconnect = function () {};
  }

  if (type === _ServiceType["default"].PRIVATE) {
    if (typeof this.authenticate === 'undefined') {
      this.authenticate = function () {};
    }

    this.deauthenticate = function () {};
  }
}
/**
 * @param {string} type
 * @param {string} name
 * @param {string[]} dependencies
 * @returns {ServiceManager}
 * @private
 */


function _buildServiceManager(type, name, dependencies) {
  var _this = this;

  var connect = type === _ServiceType["default"].LOCAL ? null : function (disconnect) {
    _this.disconnect = disconnect;
    return _this.connect();
  };
  var auth = type !== _ServiceType["default"].PRIVATE ? null : function (deauthenticate) {
    _this.deauthenticate = deauthenticate;
    return _this.authenticate();
  };
  return new _ServiceManager["default"](name, dependencies, function (settings) {
    return _this.initialize(settings);
  }, connect, auth);
}
/**
 * @param {ServiceManager} mgr
 * @private
 */


function _installLifeCycleHooks(mgr) {
  var _this2 = this;

  mgr.onInitialized(function () {
    if (mgr.type() !== _ServiceType["default"].LOCAL) {
      mgr.dependencies().forEach(function (d) {
        _this2.get(d).manager().onDisconnected(function () {
          return _this2.disconnect();
        });
      });
    }

    if (mgr.type() === _ServiceType["default"].PRIVATE) {
      mgr.dependencies().forEach(function (d) {
        _this2.get(d).manager().onDeauthenticated(function () {
          return _this2.deauthenticate();
        });
      });
    }
  });
}
/**
 * @private
 */


function _guardLifeCycleMethods() {
  var original = {
    initialize: this.initialize,
    connect: this.connect,
    authenticate: this.authenticate
  };

  this.initialize = function (settings) {
    if (this.manager().state() !== _ServiceState["default"].INITIALIZING) {
      throw new Error('Expected state INITIALIZING, but got ' + this.manager().state() + '. Did you mean to call service.manager().initialize() instead of service.initialize()?');
    }

    return original.initialize.apply(this, [settings]);
  };

  if (typeof original.connect !== 'undefined') {
    this.connect = function () {
      if (this.manager().state() !== _ServiceState["default"].CONNECTING) {
        throw new Error('Expected state CONNECTING, but got ' + this.manager().state() + '. Did you mean to call service.manager().connect() instead of service.connect()?');
      }

      return original.connect.apply(this);
    };
  }

  if (typeof original.authenticate !== 'undefined') {
    this.authenticate = function () {
      if (this.manager().state() !== _ServiceState["default"].AUTHENTICATING) {
        throw new Error('Expected state AUTHENTICATING, but got ' + this.manager().state() + '. Did you mean to call service.manager().authenticate() instead of service.authenticate()?');
      }

      return original.authenticate.apply(this);
    };
  }
}

var ServiceBase =
/*#__PURE__*/
function () {
  /**
   * @param {string} type
   * @param {string} name
   * @param {string[]} dependencies
   */
  function ServiceBase(type, name) {
    var dependencies = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    (0, _classCallCheck2["default"])(this, ServiceBase);

    if (typeof _ServiceType["default"][type] === 'undefined') {
      throw new Error('Invalid ServiceType: ' + type);
    }

    _defineLifeCycleMethods.call(this, type);

    this._serviceManager = _buildServiceManager.call(this, type, name, dependencies);

    _installLifeCycleHooks.call(this, this._serviceManager);

    _guardLifeCycleMethods.call(this);
  }
  /**
   * @returns {ServiceManager}
   */


  (0, _createClass2["default"])(ServiceBase, [{
    key: "manager",
    value: function manager() {
      return this._serviceManager;
    }
    /**
     * @param {string} dependency
     * @returns {ServiceBase}
     */

  }, {
    key: "get",
    value: function get(dependency) {
      return this._serviceManager.dependency(dependency);
    }
  }]);
  return ServiceBase;
}();

var _default = ServiceBase;
exports["default"] = _default;