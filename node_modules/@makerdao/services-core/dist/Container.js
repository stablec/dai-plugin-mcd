"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orderServices = orderServices;
Object.defineProperty(exports, "InvalidServiceError", {
  enumerable: true,
  get: function get() {
    return _ServiceManager.InvalidServiceError;
  }
});
exports.ServiceNotFoundError = exports.ServiceAlreadyRegisteredError = exports.ExtractedServiceError = exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var _values = _interopRequireDefault(require("lodash/values"));

var _uniq = _interopRequireDefault(require("lodash/uniq"));

var _ServiceManager = _interopRequireWildcard(require("./ServiceManager"));

var _toposort = _interopRequireDefault(require("toposort"));

var ServiceAlreadyRegisteredError =
/*#__PURE__*/
function (_Error) {
  (0, _inherits2["default"])(ServiceAlreadyRegisteredError, _Error);

  function ServiceAlreadyRegisteredError(name) {
    (0, _classCallCheck2["default"])(this, ServiceAlreadyRegisteredError);
    // prettier-ignore
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ServiceAlreadyRegisteredError).call(this, 'Service with name \'' + name + '\' is already registered with this container.'));
  }

  return ServiceAlreadyRegisteredError;
}((0, _wrapNativeSuper2["default"])(Error));

exports.ServiceAlreadyRegisteredError = ServiceAlreadyRegisteredError;

var ServiceNotFoundError =
/*#__PURE__*/
function (_Error2) {
  (0, _inherits2["default"])(ServiceNotFoundError, _Error2);

  function ServiceNotFoundError(name) {
    (0, _classCallCheck2["default"])(this, ServiceNotFoundError);
    // prettier-ignore
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ServiceNotFoundError).call(this, 'Service with name \'' + name + '\' cannot be found in this container.'));
  }

  return ServiceNotFoundError;
}((0, _wrapNativeSuper2["default"])(Error));

exports.ServiceNotFoundError = ServiceNotFoundError;

var ExtractedServiceError =
/*#__PURE__*/
function (_Error3) {
  (0, _inherits2["default"])(ExtractedServiceError, _Error3);

  function ExtractedServiceError(name) {
    (0, _classCallCheck2["default"])(this, ExtractedServiceError);
    // prettier-ignore
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ExtractedServiceError).call(this, 'Service with name \'' + name + '\' has been extracted from the core dai.js library into a discrete plugin. Please refer to the documentation here to install and add it to your configuration: \n\n https://github.com/makerdao/dai.js/wiki/Basic-Usage-(Plugins) \n\n'));
  }

  return ExtractedServiceError;
}((0, _wrapNativeSuper2["default"])(Error)); // exported just for testing


exports.ExtractedServiceError = ExtractedServiceError;

function orderServices(services) {
  var edges = [];
  var servicesWithoutDeps = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var service = _step.value;
      var name = service.manager().name();
      var depNames = service.manager().dependencies();

      if (depNames.length === 0) {
        servicesWithoutDeps.push(name);
      } else {
        depNames.forEach(function (dn) {
          return edges.push([dn, name]);
        });
      }
    };

    for (var _iterator = services[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return (0, _uniq["default"])((0, _toposort["default"])(edges).concat(servicesWithoutDeps));
}

var Container =
/*#__PURE__*/
function () {
  function Container() {
    (0, _classCallCheck2["default"])(this, Container);
    this._services = {};
    this.isAuthenticated = false;
  }

  (0, _createClass2["default"])(Container, [{
    key: "register",
    value: function register(service) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (!_ServiceManager["default"].isValidService(service)) {
        throw new _ServiceManager.InvalidServiceError('Service must be an object with manager() method returning a valid ServiceManager');
      }

      name = name || service.manager().name();
      var s = this.service(name, false);

      if (s !== undefined && s !== service) {
        throw new ServiceAlreadyRegisteredError(name);
      }

      this._services[name] = service;
      return this;
    }
  }, {
    key: "service",
    value: function service(name) {
      var throwIfMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var extractedServices = ['exchange'];

      if (!name) {
        throw new Error('Provide a service name.');
      }

      if (!this._services[name] && throwIfMissing && extractedServices.includes(name)) {
        throw new ExtractedServiceError(name);
      }

      if (!this._services[name] && throwIfMissing) {
        throw new ServiceNotFoundError(name);
      }

      return this._services[name];
    }
  }, {
    key: "getRegisteredServiceNames",
    value: function getRegisteredServiceNames() {
      return Object.keys(this._services);
    }
  }, {
    key: "injectDependencies",
    value: function injectDependencies() {
      var services = (0, _values["default"])(this._services);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = services[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var service = _step2.value;
          var manager = service.manager();
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = manager.dependencies()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var name = _step3.value;
              var dep = this._services[name];
              if (!dep) throw new ServiceNotFoundError(name);
              manager.inject(name, this._services[name]);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: "initialize",
    value: function initialize() {
      return this._waitForServices(function (s) {
        return s.manager().initialize();
      });
    }
  }, {
    key: "connect",
    value: function connect() {
      return this._waitForServices(function (s) {
        return s.manager().connect();
      });
    }
  }, {
    key: "authenticate",
    value: function authenticate() {
      var _this = this;

      return this._waitForServices(function (s) {
        return s.manager().authenticate();
      }).then(function () {
        _this.isAuthenticated = true;
      });
    }
  }, {
    key: "_waitForServices",
    value: function () {
      var _waitForServices2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(callback) {
        var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, name, service;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this._orderedServiceNames) {
                  this._orderedServiceNames = orderServices((0, _values["default"])(this._services));
                }

                _iteratorNormalCompletion4 = true;
                _didIteratorError4 = false;
                _iteratorError4 = undefined;
                _context.prev = 4;
                _iterator4 = this._orderedServiceNames[Symbol.iterator]();

              case 6:
                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                  _context.next = 16;
                  break;
                }

                name = _step4.value;
                service = this._services[name];

                if (service) {
                  _context.next = 11;
                  break;
                }

                throw new Error("No service for ".concat(name));

              case 11:
                _context.next = 13;
                return callback(this._services[name]);

              case 13:
                _iteratorNormalCompletion4 = true;
                _context.next = 6;
                break;

              case 16:
                _context.next = 22;
                break;

              case 18:
                _context.prev = 18;
                _context.t0 = _context["catch"](4);
                _didIteratorError4 = true;
                _iteratorError4 = _context.t0;

              case 22:
                _context.prev = 22;
                _context.prev = 23;

                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }

              case 25:
                _context.prev = 25;

                if (!_didIteratorError4) {
                  _context.next = 28;
                  break;
                }

                throw _iteratorError4;

              case 28:
                return _context.finish(25);

              case 29:
                return _context.finish(22);

              case 30:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 18, 22, 30], [23,, 25, 29]]);
      }));

      function _waitForServices(_x) {
        return _waitForServices2.apply(this, arguments);
      }

      return _waitForServices;
    }()
  }]);
  return Container;
}();

exports["default"] = Container;